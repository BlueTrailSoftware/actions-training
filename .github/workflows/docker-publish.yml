name: CI/CD

env:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ''
  PG_HOST: postgres
  PG_PORT: 5432
  POSTGRES_DB: alg_database
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: '123456'
  POSTGRES_HOST_AUTH_METHOD: trust

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - '*'

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CI_REGISTRY_PASSWORD: ${{ secrets.CI_REGISTRY_PASSWORD }}
      CI_REGISTRY_USER: ${{ secrets.CI_REGISTRY_USER }}
      TAG_TOKEN: ${{ secrets.TAG_TOKEN }}
      GITLAB_USER_NAME: ${{ secrets.GITLAB_USER_NAME }}
      GITLAB_USER_EMAIL: ${{ secrets.GITLAB_USER_EMAIL }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install dependencies and build
        run: |
          npm install --omit-dev
          npm run build
          rm -rf src
          rm package-lock.json tsconfig.eslint.json tsconfig.json
          cd public
          npm install --omit-dev
          npm run build
          rm -rf public
          rm -rf src
          rm package-lock.json

      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: |
            node_modules/
            public/node_modules/
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Archive artifacts
        uses: actions/upload-artifact@v2
        with:
          name: build-artifacts
          path: |
            node_modules/
            public/node_modules/
            dist/
            public/build/

      - name: Build and push Docker image (develop)
        if: github.ref == 'refs/heads/develop'
        run: |
          docker info
          echo -n $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
          VERSION="$(cat ./changelog/version.md)_develop"
          docker build . --tag $CI_REGISTRY_IMAGE:$VERSION --tag $CI_REGISTRY_IMAGE:$VERSION_$GITHUB_SHA
          docker push $CI_REGISTRY_IMAGE:$VERSION
          docker push $CI_REGISTRY_IMAGE:$VERSION_$GITHUB_SHA

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm run autotest

      - name: Publish test results
        uses: actions/upload-artifact@v2
        with:
          name: test-results
          path: junit.xml

  release:
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags/release.')
    env:
      CI_REGISTRY_PASSWORD: ${{ secrets.CI_REGISTRY_PASSWORD }}
      CI_REGISTRY_USER: ${{ secrets.CI_REGISTRY_USER }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker
        uses: docker/setup-docker@v2

      - name: Set up Git
        run: |
          git config --global user.name "${GITLAB_USER_NAME}"
          git config --global user.email "${GITLAB_USER_EMAIL}"

      - name: Build and push Docker image (release)
        run: |
          docker info
          echo -n $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
          VERSION="release_$(cat ./changelog/version.md)"
          docker build . --tag $CI_REGISTRY_IMAGE:$VERSION --tag $CI_REGISTRY_IMAGE:$VERSION_$GITHUB_SHA
          docker push $CI_REGISTRY_IMAGE:$VERSION
          docker push $CI_REGISTRY_IMAGE:$VERSION_$GITHUB_SHA

  package:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    env:
      CI_REGISTRY_PASSWORD: ${{ secrets.CI_REGISTRY_PASSWORD }}
      CI_REGISTRY_USER: ${{ secrets.CI_REGISTRY_USER }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker
        uses: docker/setup-docker@v2

      - name: Set up Git
        run: |
          git config --global user.name "${GITLAB_USER_NAME}"
          git config --global user.email "${GITLAB_USER_EMAIL}"

      - name: Build and push Docker image (package)
        run: |
          docker info
          echo -n $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
          VERSION="$(cat ./changelog/version.md)_main"
          docker build . --tag $CI_REGISTRY_IMAGE:$VERSION --tag $CI_REGISTRY_IMAGE:$VERSION_$GITHUB_SHA
          docker push $CI_REGISTRY_IMAGE:$VERSION
          docker push $CI_REGISTRY_IMAGE:$VERSION_$GITHUB_SHA

  tag:
    runs-on: ubuntu-latest
    needs: package
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Git
        run: |
          git config --global user.name "${GITLAB_USER_NAME}"
          git config --global user.email "${GITLAB_USER_EMAIL}"
          git remote remove api-origin || true
          git remote add api-origin https://oauth2:${{ secrets.TAG_TOKEN }}@github.com/cartier-lab/alg-backend.git
          git fetch --all

      - name: Tag and push release
        run: |
          VERSION="$(cat ./changelog/version.md)"
          echo $VERSION
          if git tag -l "$VERSION"; then
            echo "Version $VERSION already exists";
            git tag --delete $VERSION
            git tag -a $VERSION -m "Version $VERSION";
            git push api-origin $VERSION;
          else
            git tag -a $VERSION -m "Version $VERSION";
            git push api-origin $VERSION;
          fi
